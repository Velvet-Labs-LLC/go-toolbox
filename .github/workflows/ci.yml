name: 🚀 CI Pipeline

# Cache Strategy for Self-Hosted Runners:
# - Use unique cache keys per job to prevent conflicts
# - Separate Go module cache from build cache
# - Include runner name/labels in cache keys for isolation
# - Use restore-keys with fallbacks for cache efficiency
# - Avoid shared cache conflicts by using job-specific prefixes
# - Leverage GOCACHE and GOMODCACHE environment variables

on:
  push:
    branches: [main, develop, feature/*]
    tags: ["v*"] # Trigger on version tags
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: "1.24.0"
  CACHE_VERSION: "v2" # Increment this to invalidate all caches
  # Optimize for self-hosted runners
  GOCACHE: "/tmp/go-build-cache"
  GOMODCACHE: "/tmp/go-mod-cache"

permissions:
  contents: write # Required for creating releases and uploading assets
  actions: read # Required for downloading artifacts
  checks: write # Required for test results

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false # We'll handle caching manually for better control

      - name: 📁 Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-test-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 💾 Cache Go build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-test-${{ hashFiles('**/*.go') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-test-${{ hashFiles('**/*.go') }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-test-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧪 Run tests with coverage and detailed reporting
        run: |
          echo "🧪 Running comprehensive test suite..."

          # Create results directory for artifacts
          mkdir -p test-results

          # Run tests with JSON output for better parsing
          go test -race -coverprofile=coverage.out -covermode=atomic -v -json ./... | tee test-results/test-output.json

          # Generate human-readable test report
          echo "📊 Test Results Summary:" | tee test-results/summary.txt
          echo "=========================" | tee -a test-results/summary.txt

          # Parse test results
          PASSED=$(grep '"Action":"pass"' test-results/test-output.json | grep '"Package":' | wc -l || echo "0")
          FAILED=$(grep '"Action":"fail"' test-results/test-output.json | grep '"Package":' | wc -l || echo "0")
          SKIPPED=$(grep '"Action":"skip"' test-results/test-output.json | wc -l || echo "0")

          echo "✅ Passed: $PASSED packages" | tee -a test-results/summary.txt
          echo "❌ Failed: $FAILED packages" | tee -a test-results/summary.txt  
          echo "⏭️  Skipped: $SKIPPED tests" | tee -a test-results/summary.txt
          echo "=========================" | tee -a test-results/summary.txt

          # Show coverage summary
          if [ -f coverage.out ]; then
            echo "📈 Coverage Summary:" | tee -a test-results/summary.txt
            go tool cover -func=coverage.out | tail -1 | tee -a test-results/summary.txt
          fi

          # Check if any tests failed
          if [ "$FAILED" -gt 0 ]; then
            echo "🚨 Test failures detected!"
            echo "::error title=Test Failures::$FAILED packages failed tests"
            exit 1
          fi

      - name: 🏃 Quick benchmark smoke test
        run: |
          echo "🏃 Running quick benchmark smoke test..."

          # Run a quick benchmark to ensure they don't crash
          timeout 30s go test -bench=. -benchtime=100ms ./... || echo "⚠️ Benchmark smoke test timed out or failed"

          echo "✅ Benchmark smoke test completed"

      - name: 📊 Generate test report artifacts
        if: always()
        run: |
          # Generate coverage HTML report
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o test-results/coverage.html
            echo "📊 Coverage report generated: test-results/coverage.html"
          fi

          # Create test summary for GitHub
          if [ -f test-results/test-output.json ]; then
            echo "# 🧪 Test Results" > test-results/github-summary.md
            echo "" >> test-results/github-summary.md
            cat test-results/summary.txt >> test-results/github-summary.md
            
            # Add failed tests details if any
            if grep -q '"Action":"fail"' test-results/test-output.json; then
              echo "" >> test-results/github-summary.md
              echo "## ❌ Failed Tests" >> test-results/github-summary.md
              echo "\`\`\`" >> test-results/github-summary.md
              grep '"Action":"fail"' test-results/test-output.json | head -10 >> test-results/github-summary.md
              echo "\`\`\`" >> test-results/github-summary.md
            fi
          fi

      - name: 📤 Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            test-results/
            coverage.out
          retention-days: 30

      - name: 🧪 Test Makefile targets
        run: |
          make clean
          make deps
          make build

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out

  format:
    name: 🎨 Format Check
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: � Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-format-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-format-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 💾 Cache Go build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-format-${{ hashFiles('**/*.go') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-format-${{ hashFiles('**/*.go') }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-format-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-

      - name: 📦 Download dependencies
        run: go mod download

      - name: ✨ Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: 🔍 Go vet
        run: go vet ./...

  lint:
    name: 🔍 Lint Check
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: � Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-lint-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 💾 Cache Go build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-lint-${{ hashFiles('**/*.go') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-lint-${{ hashFiles('**/*.go') }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-lint-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧹 golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          args: --timeout=10m
          # Use our custom cache paths
          skip-cache: true

  security:
    name: 🔒 Security Scan
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: � Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-security-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-security-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🛡️ Run Gosec Security Scanner
        run: |
          # Install gosec if not available
          if ! command -v gosec &> /dev/null; then
            echo "📥 Installing gosec..."
            go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          fi

          # Run gosec security scan
          echo "🛡️ Running security scan..."
          gosec ./...

  build:
    name: 🏗️ Build Matrix
    runs-on: self-hosted
    needs: [test, format, lint, security]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude Windows ARM64 for now
          - goos: windows
            goarch: arm64
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: � Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-build-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-build-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-build-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 💾 Cache Go build cache (platform-specific)
        uses: actions/cache@v4
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/*.go') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/*.go') }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-build-

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔨 Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p bin/cli bin/tui bin/unified

          # Build unified binary (all-in-one)
          echo "🔨 Building unified binary..."
          if [ "$GOOS" = "windows" ]; then
            go build -ldflags="-s -w" -o "bin/unified/go-toolbox-${{ matrix.goos }}-${{ matrix.goarch }}.exe" "./cmd/unified"
          else
            go build -ldflags="-s -w" -o "bin/unified/go-toolbox-${{ matrix.goos }}-${{ matrix.goarch }}" "./cmd/unified"
          fi

          # Build CLI applications (separate binaries)
          for dir in $(find cmd/cli -type f -name "main.go" -exec dirname {} \; | sort); do
            app=$(basename $dir)
            bin_name="$app"
            echo "🔨 Building CLI: $dir as $bin_name..."
            if [ "$GOOS" = "windows" ]; then
              go build -ldflags="-s -w" -o "bin/cli/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}.exe" "./$dir"
            else
              go build -ldflags="-s -w" -o "bin/cli/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}" "./$dir"
            fi
          done

          # Build TUI applications (separate binaries)
          for dir in $(find cmd/tui -type f -name "main.go" -exec dirname {} \; | sort); do
            app=$(basename $dir)
            bin_name="$app"
            echo "🔨 Building TUI: $dir as $bin_name..."
            if [ "$GOOS" = "windows" ]; then
              go build -ldflags="-s -w" -o "bin/tui/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}.exe" "./$dir"
            else
              go build -ldflags="-s -w" -o "bin/tui/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}" "./$dir"
            fi
          done

          # List what was built for verification
          echo "📦 Built unified binary:"
          ls -la bin/unified/ || echo "No unified binary built"
          echo "📦 Built CLI binaries:"
          ls -la bin/cli/ || echo "No CLI binaries built"
          echo "📦 Built TUI binaries:"
          ls -la bin/tui/ || echo "No TUI binaries built"

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_id }}
          path: |
            bin/unified/*
            bin/cli/*
            bin/tui/*

      - name: 🧪 Test binaries with performance validation (Linux only)
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          echo "🧪 Testing binaries with performance validation..."

          # Create test results directory
          mkdir -p binary-test-results

          # Test unified binary
          echo "🔍 Testing unified binary..."
          for binary in bin/unified/*linux-amd64*; do
            if [ -f "$binary" ]; then
              echo "🔍 Testing unified: $binary..."
              chmod +x "$binary"
              
              # Binary size check
              BINARY_SIZE=$(stat -c%s "$binary" 2>/dev/null || echo "0")
              echo "📦 Binary size: $(echo $BINARY_SIZE | awk '{printf "%.2f MB", $1/1024/1024}')"
              
              # Performance timing for startup
              echo "⏱️  Testing startup performance..."
              START_TIME=$(date +%s%N)
              
              # Test different modes with timing
              echo "  🎯 Testing CLI mode (default):"
              if timeout 10s $binary --help > /dev/null 2>&1; then
                echo "    ✅ CLI mode works"
              else
                echo "    ⚠️  CLI mode help failed or timed out"
              fi
              
              echo "  🖥️ Testing TUI mode:"
              if timeout 10s $binary tui --help > /dev/null 2>&1; then
                echo "    ✅ TUI mode works"
              else
                echo "    ⚠️  TUI mode help failed or timed out"
              fi
              
              echo "  🌐 Testing server mode:"
              if timeout 10s $binary serve --help > /dev/null 2>&1; then
                echo "    ✅ Server mode works"
              else
                echo "    ⚠️  Server mode help failed or timed out"
              fi
              
              echo "  📝 Testing version command:"
              if timeout 5s $binary version > /dev/null 2>&1; then
                echo "    ✅ Version command works"
              else
                echo "    ⚠️  Version command failed or timed out"
              fi
              
              END_TIME=$(date +%s%N)
              STARTUP_TIME=$(echo "scale=3; ($END_TIME - $START_TIME) / 1000000000" | bc -l 2>/dev/null || echo "N/A")
              echo "⏱️  Total test time: ${STARTUP_TIME}s"
              
              # Log metrics
              echo "unified,$BINARY_SIZE,$STARTUP_TIME" >> binary-test-results/metrics.csv
            fi
          done

          # Test CLI binaries with performance metrics
          echo "🔍 Testing CLI binaries..."
          for binary in bin/cli/*linux-amd64*; do
            if [ -f "$binary" ]; then
              echo "🔨 Testing CLI: $binary..."
              chmod +x "$binary"
              
              BINARY_SIZE=$(stat -c%s "$binary" 2>/dev/null || echo "0")
              START_TIME=$(date +%s%N)
              
              # Try to run with --help flag, most tools should support this
              if timeout 5s $binary --help > /dev/null 2>&1 || timeout 5s $binary -h > /dev/null 2>&1 || timeout 5s $binary help > /dev/null 2>&1; then
                echo "✅ CLI $binary works"
                RESULT="pass"
              else
                echo "⚠️  CLI $binary might not support help flags or timed out"
                RESULT="warn"
              fi
              
              END_TIME=$(date +%s%N)
              EXEC_TIME=$(echo "scale=3; ($END_TIME - $START_TIME) / 1000000000" | bc -l 2>/dev/null || echo "N/A")
              
              # Log metrics
              echo "cli-$(basename $binary),$BINARY_SIZE,$EXEC_TIME,$RESULT" >> binary-test-results/metrics.csv
            fi
          done

          # Test TUI binaries with performance metrics
          echo "🔍 Testing TUI binaries..."
          for binary in bin/tui/*linux-amd64*; do
            if [ -f "$binary" ]; then
              echo "🖥️ Testing TUI: $binary..."
              chmod +x "$binary"
              
              BINARY_SIZE=$(stat -c%s "$binary" 2>/dev/null || echo "0")
              START_TIME=$(date +%s%N)
              
              # Try to run with --help flag, most tools should support this
              if timeout 5s $binary --help > /dev/null 2>&1 || timeout 5s $binary -h > /dev/null 2>&1 || timeout 5s $binary help > /dev/null 2>&1; then
                echo "✅ TUI $binary works"
                RESULT="pass"
              else
                echo "⚠️  TUI $binary might not support help flags or timed out"
                RESULT="warn"
              fi
              
              END_TIME=$(date +%s%N)
              EXEC_TIME=$(echo "scale=3; ($END_TIME - $START_TIME) / 1000000000" | bc -l 2>/dev/null || echo "N/A")
              
              # Log metrics
              echo "tui-$(basename $binary),$BINARY_SIZE,$EXEC_TIME,$RESULT" >> binary-test-results/metrics.csv
            fi
          done

          # Generate performance summary
          if [ -f binary-test-results/metrics.csv ]; then
            echo "📊 Binary Performance Summary:" | tee binary-test-results/summary.txt
            echo "================================" | tee -a binary-test-results/summary.txt
            echo "Type,Size(bytes),ExecTime(s),Result" | tee -a binary-test-results/summary.txt
            cat binary-test-results/metrics.csv | tee -a binary-test-results/summary.txt
            
            # Calculate totals
            TOTAL_SIZE=$(awk -F',' '{sum+=$2} END {printf "%.2f MB", sum/1024/1024}' binary-test-results/metrics.csv)
            AVG_TIME=$(awk -F',' '$3!="N/A" {sum+=$3; count++} END {if(count>0) printf "%.3fs", sum/count; else print "N/A"}' binary-test-results/metrics.csv)
            
            echo "--------------------------------" | tee -a binary-test-results/summary.txt
            echo "Total size: $TOTAL_SIZE" | tee -a binary-test-results/summary.txt
            echo "Average startup time: $AVG_TIME" | tee -a binary-test-results/summary.txt
            echo "✅ Binary testing completed" | tee -a binary-test-results/summary.txt
          fi

      - name: 📤 Upload binary test results (CI validation only)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: binary-test-results-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_id }}
          path: |
            binary-test-results/
          retention-days: 7
          if-no-files-found: ignore

  release:
    name: 🚀 Release
    runs-on: self-hosted
    needs: [test, format, lint, security, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: � Create cache directories
        run: |
          mkdir -p ${{ env.GOCACHE }}
          mkdir -p ${{ env.GOMODCACHE }}

      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-release-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-release-
            ${{ env.CACHE_VERSION }}-${{ runner.name }}-go-mod-

      - name: 📦 Download dependencies
        run: go mod download

      - name: Download binary artifacts only
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binaries-*-${{ github.run_id }}
          merge-multiple: true

      - name: 🎁 Prepare release assets
        run: |
          # Debug: Show what we downloaded
          echo "📁 Downloaded artifacts:"
          find artifacts -type f | head -20 || echo "No artifacts found"

          mkdir -p release/cli release/tui release/unified

          # Organize unified binaries (single all-in-one binary)
          echo "🎁 Organizing unified binaries..."
          find artifacts -path "*/bin/unified/*" -type f -exec cp {} release/unified/ \; || echo "No unified binaries found"

          # Organize CLI binaries
          echo "🎁 Organizing CLI binaries..."
          find artifacts -path "*/bin/cli/*" -type f -exec cp {} release/cli/ \; || echo "No CLI binaries found"

          # Organize TUI binaries  
          echo "🎁 Organizing TUI binaries..."
          find artifacts -path "*/bin/tui/*" -type f -exec cp {} release/tui/ \; || echo "No TUI binaries found"

          # Debug: Show what got organized
          echo "📁 Organized binaries:"
          find release/ -type f | head -10 || echo "No files in release directory"

          # Create unified binary archives (recommended download)
          if [ "$(ls -A release/unified 2>/dev/null)" ]; then
            echo "📦 Creating unified binary archives..."
            cd release
            zip -r go-toolbox-unified-${GITHUB_REF_NAME:-latest}.zip unified/
            tar -czf go-toolbox-unified-${GITHUB_REF_NAME:-latest}.tar.gz unified/
            cd ..
          else
            echo "⚠️ No unified binaries found to archive"
          fi

          # Create archive packages for each type
          if [ "$(ls -A release/cli 2>/dev/null)" ]; then
            echo "📦 Creating CLI archive..."
            cd release
            zip -r go-toolbox-cli-${GITHUB_REF_NAME:-latest}.zip cli/
            tar -czf go-toolbox-cli-${GITHUB_REF_NAME:-latest}.tar.gz cli/
            cd ..
          fi

          if [ "$(ls -A release/tui 2>/dev/null)" ]; then
            echo "📦 Creating TUI archive..."
            cd release
            zip -r go-toolbox-tui-${GITHUB_REF_NAME:-latest}.zip tui/
            tar -czf go-toolbox-tui-${GITHUB_REF_NAME:-latest}.tar.gz tui/
            cd ..
          fi

          # Create combined archive (separate binaries)
          if [ "$(ls -A release/cli 2>/dev/null)" ] || [ "$(ls -A release/tui 2>/dev/null)" ]; then
            echo "📦 Creating combined separate binaries archive..."
            cd release
            zip -r go-toolbox-separate-${GITHUB_REF_NAME:-latest}.zip cli/ tui/
            tar -czf go-toolbox-separate-${GITHUB_REF_NAME:-latest}.tar.gz cli/ tui/
            cd ..
          fi

          # Create complete archive (unified + separate)
          if [ "$(ls -A release/unified 2>/dev/null)" ] && ([ "$(ls -A release/cli 2>/dev/null)" ] || [ "$(ls -A release/tui 2>/dev/null)" ]); then
            echo "📦 Creating complete archive (all binaries)..."
            cd release
            zip -r go-toolbox-complete-${GITHUB_REF_NAME:-latest}.zip unified/ cli/ tui/
            tar -czf go-toolbox-complete-${GITHUB_REF_NAME:-latest}.tar.gz unified/ cli/ tui/
            cd ..
          fi

          # List what was created
          echo "📦 Release structure:"
          ls -la release/
          echo "📦 Created archives:"
          ls -la release/*.zip release/*.tar.gz 2>/dev/null || echo "No archives created"
          if [ -d release/unified ]; then
            echo "📦 Unified binaries:"
            ls -la release/unified/
          fi
          if [ -d release/cli ]; then
            echo "📦 CLI binaries:"
            ls -la release/cli/
          fi
          if [ -d release/tui ]; then
            echo "📦 TUI binaries:"
            ls -la release/tui/
          fi

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          echo "📝 Changes in this release:" > CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

      - name: 🔍 Check if release exists
        id: release_exists
        run: |
          if gh release view ${{ github.ref_name }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload release assets to existing release
        if: steps.release_exists.outputs.exists == 'true'
        run: |
          echo "🔄 Release already exists, uploading assets..."

          # Debug: Show what files exist
          echo "📁 Files in release directory:"
          ls -la release/ || echo "No release directory found"
          echo "📁 All files in release (including subdirectories):"
          find release/ -type f || echo "No files found in release directory"

          # Check if we have any archives
          archive_count=0
          for file in release/*.zip release/*.tar.gz; do
            if [ -f "$file" ]; then
              archive_count=$((archive_count + 1))
            fi
          done

          echo "📊 Found $archive_count archive files"

          # Upload archive files from release directory
          uploaded_files=0
          for file in release/*.zip release/*.tar.gz; do
            if [ -f "$file" ]; then
              echo "📤 Uploading $file..."
              if gh release upload ${{ github.ref_name }} "$file" --clobber; then
                echo "✅ Successfully uploaded: $file"
                uploaded_files=$((uploaded_files + 1))
              else
                echo "❌ Failed to upload: $file"
              fi
            fi
          done

          # Also upload individual binaries if no archives were created
          if [ $archive_count -eq 0 ]; then
            echo "📦 No archives found, uploading individual binaries..."
            for dir in release/unified release/cli release/tui; do
              if [ -d "$dir" ]; then
                for file in "$dir"/*; do
                  if [ -f "$file" ]; then
                    echo "📤 Uploading individual binary: $file..."
                    if gh release upload ${{ github.ref_name }} "$file" --clobber; then
                      echo "✅ Successfully uploaded: $file"
                      uploaded_files=$((uploaded_files + 1))
                    else
                      echo "❌ Failed to upload: $file"
                    fi
                  fi
                done
              fi
            done
          fi

          echo "📊 Total files uploaded: $uploaded_files"

          # Final verification - show what's in the release now
          echo "🔍 Final release contents:"
          gh release view ${{ github.ref_name }} --json assets --jq '.assets[].name' | sort || echo "Could not list release assets"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎉 Create new release
        if: steps.release_exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2.3.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: release/*
          generate_release_notes: true
