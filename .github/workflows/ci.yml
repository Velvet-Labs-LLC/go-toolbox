name: CI

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Test Makefile targets
        run: |
          make clean
          make deps
          make build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out

  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m --issues-exit-code=0

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.8
        with:
          args: "./..."

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, format, lint, benchmark]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude Windows ARM64 for now
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p bin
          # Build all main.go applications found in cmd subdirectories
          for dir in $(find cmd -type f -name "main.go" -exec dirname {} \; | sort); do
            parent=$(basename $(dirname $dir))
            app=$(basename $dir)
            bin_name="$parent-$app"
            echo "Building $dir as $bin_name..."
            if [ "$GOOS" = "windows" ]; then
              go build -ldflags="-s -w" -o "bin/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}.exe" "./$dir"
            else
              go build -ldflags="-s -w" -o "bin/${bin_name}-${{ matrix.goos }}-${{ matrix.goarch }}" "./$dir"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/*

      - name: Test binaries (Linux only)
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          # Test that binaries can be executed and show help
          for binary in bin/*linux-amd64; do
            if [ -f "$binary" ]; then
              echo "Testing $binary..."
              chmod +x "$binary"
              # Try to run with --help flag, most tools should support this
              if $binary --help || $binary -h || $binary help; then
                echo "✅ $binary works"
              else
                echo "⚠️  $binary might not support help flags"
              fi
            fi
          done

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          echo "Running benchmarks..."
          go test -bench=. -benchmem -count=3 ./... | tee benchmark.txt
          echo "Benchmark results saved to benchmark.txt"

      - name: Download previous benchmark data
        uses: actions/cache@v3
        with:
          path: previous-benchmark.txt
          key: benchmark-${{ github.repository }}-${{ github.ref_name }}
          restore-keys: |
            benchmark-${{ github.repository }}-main

      - name: Compare benchmarks
        id: compare
        run: |
          if [ -f previous-benchmark.txt ]; then
            echo "Comparing with previous benchmark results..."

            # Install benchcmp if not available
            go install golang.org/x/tools/cmd/benchcmp@latest

            # Compare benchmarks and capture output
            echo "## Benchmark Comparison" > benchmark-comparison.md
            echo "" >> benchmark-comparison.md
            echo "Comparing current benchmarks against previous run:" >> benchmark-comparison.md
            echo "" >> benchmark-comparison.md
            echo '```' >> benchmark-comparison.md
            if benchcmp previous-benchmark.txt benchmark.txt >> benchmark-comparison.md 2>&1; then
              echo "Benchmark comparison completed successfully"
            else
              echo "No significant changes or comparison failed" >> benchmark-comparison.md
            fi
            echo '```' >> benchmark-comparison.md

            # Check for performance regressions (simple heuristic)
            if grep -q "+.*%" benchmark-comparison.md; then
              echo "performance_regression=true" >> $GITHUB_OUTPUT
              echo "⚠️ Potential performance regression detected!" >> benchmark-comparison.md
            else
              echo "performance_regression=false" >> $GITHUB_OUTPUT
              echo "✅ No significant performance regressions detected." >> benchmark-comparison.md
            fi
          else
            echo "No previous benchmark data found. This will be the baseline."
            echo "## Benchmark Results" > benchmark-comparison.md
            echo "" >> benchmark-comparison.md
            echo "This is the first benchmark run - establishing baseline." >> benchmark-comparison.md
            echo "performance_regression=false" >> $GITHUB_OUTPUT
          fi

      - name: Save current benchmark as previous
        run: cp benchmark.txt previous-benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            benchmark.txt
            benchmark-comparison.md

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'benchmark-comparison.md';

            if (fs.existsSync(path)) {
              const content = fs.readFileSync(path, 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content
              });
            }

      - name: Fail on performance regression
        if: steps.compare.outputs.performance_regression == 'true' && github.event_name == 'pull_request'
        run: |
          echo "Performance regression detected! Check the benchmark comparison above."
          exit 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, format, lint, benchmark, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "cli-*" -type f -exec cp {} release/ \;
          find artifacts -name "tui-*" -type f -exec cp {} release/ \;
          find artifacts -name "web-*" -type f -exec cp {} release/ \;

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          echo "Changes in this release:" > CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: release/*
